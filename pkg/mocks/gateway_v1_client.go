// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	domain "github.com/antelman107/filestorage/pkg/domain"

	mock "github.com/stretchr/testify/mock"
)

// GatewayV1Client is an autogenerated mock type for the GatewayV1Client type
type GatewayV1Client struct {
	mock.Mock
}

// DeleteFile provides a mock function with given fields: ctx, id
func (_m *GatewayV1Client) DeleteFile(ctx context.Context, id string) (domain.File, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.File
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.File, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.File); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.File)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFileContent provides a mock function with given fields: ctx, id, writer
func (_m *GatewayV1Client) GetFileContent(ctx context.Context, id string, writer io.Writer) error {
	ret := _m.Called(ctx, id, writer)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Writer) error); ok {
		r0 = rf(ctx, id, writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetHealth provides a mock function with given fields: ctx, serverURL
func (_m *GatewayV1Client) GetHealth(ctx context.Context, serverURL string) error {
	ret := _m.Called(ctx, serverURL)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, serverURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostFile provides a mock function with given fields: ctx, name, file
func (_m *GatewayV1Client) PostFile(ctx context.Context, name string, file io.ReadCloser) (domain.File, error) {
	ret := _m.Called(ctx, name, file)

	var r0 domain.File
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.ReadCloser) (domain.File, error)); ok {
		return rf(ctx, name, file)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.ReadCloser) domain.File); ok {
		r0 = rf(ctx, name, file)
	} else {
		r0 = ret.Get(0).(domain.File)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.ReadCloser) error); ok {
		r1 = rf(ctx, name, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostServer provides a mock function with given fields: ctx, url
func (_m *GatewayV1Client) PostServer(ctx context.Context, url string) (domain.Server, error) {
	ret := _m.Called(ctx, url)

	var r0 domain.Server
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Server, error)); ok {
		return rf(ctx, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Server); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Get(0).(domain.Server)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGatewayV1Client interface {
	mock.TestingT
	Cleanup(func())
}

// NewGatewayV1Client creates a new instance of GatewayV1Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGatewayV1Client(t mockConstructorTestingTNewGatewayV1Client) *GatewayV1Client {
	mock := &GatewayV1Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
