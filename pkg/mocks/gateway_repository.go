// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/antelman107/filestorage/pkg/domain"
	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// GatewayRepository is an autogenerated mock type for the GatewayRepository type
type GatewayRepository struct {
	mock.Mock
}

// DeleteChunk provides a mock function with given fields: ctx, id
func (_m *GatewayRepository) DeleteChunk(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFile provides a mock function with given fields: ctx, id
func (_m *GatewayRepository) DeleteFile(ctx context.Context, id string) (domain.File, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.File
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.File, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.File); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.File)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChunksByFileID provides a mock function with given fields: ctx, fileID
func (_m *GatewayRepository) GetChunksByFileID(ctx context.Context, fileID string) (domain.Chunks, error) {
	ret := _m.Called(ctx, fileID)

	var r0 domain.Chunks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Chunks, error)); ok {
		return rf(ctx, fileID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Chunks); ok {
		r0 = rf(ctx, fileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Chunks)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServersUsages provides a mock function with given fields: ctx
func (_m *GatewayRepository) GetServersUsages(ctx context.Context) (domain.ServersSummary, error) {
	ret := _m.Called(ctx)

	var r0 domain.ServersSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (domain.ServersSummary, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) domain.ServersSummary); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(domain.ServersSummary)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUploadedFile provides a mock function with given fields: ctx, id
func (_m *GatewayRepository) GetUploadedFile(ctx context.Context, id string) (domain.File, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.File
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.File, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.File); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.File)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitTransaction provides a mock function with given fields:
func (_m *GatewayRepository) InitTransaction() (*sqlx.Tx, error) {
	ret := _m.Called()

	var r0 *sqlx.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func() (*sqlx.Tx, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *sqlx.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LockFile provides a mock function with given fields: ctx, id
func (_m *GatewayRepository) LockFile(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LockServers provides a mock function with given fields: ctx
func (_m *GatewayRepository) LockServers(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreChunks provides a mock function with given fields: ctx, chunks
func (_m *GatewayRepository) StoreChunks(ctx context.Context, chunks domain.Chunks) error {
	ret := _m.Called(ctx, chunks)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Chunks) error); ok {
		r0 = rf(ctx, chunks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreFile provides a mock function with given fields: ctx, file
func (_m *GatewayRepository) StoreFile(ctx context.Context, file domain.File) error {
	ret := _m.Called(ctx, file)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.File) error); ok {
		r0 = rf(ctx, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreServer provides a mock function with given fields: ctx, server
func (_m *GatewayRepository) StoreServer(ctx context.Context, server domain.Server) error {
	ret := _m.Called(ctx, server)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Server) error); ok {
		r0 = rf(ctx, server)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateFileIsUploaded provides a mock function with given fields: ctx, id
func (_m *GatewayRepository) UpdateFileIsUploaded(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUploadedChunk provides a mock function with given fields: ctx, id, hash
func (_m *GatewayRepository) UpdateUploadedChunk(ctx context.Context, id string, hash string) error {
	ret := _m.Called(ctx, id, hash)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewGatewayRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewGatewayRepository creates a new instance of GatewayRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGatewayRepository(t mockConstructorTestingTNewGatewayRepository) *GatewayRepository {
	mock := &GatewayRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
