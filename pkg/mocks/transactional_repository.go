// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	sqlx "github.com/jmoiron/sqlx"
	mock "github.com/stretchr/testify/mock"
)

// TransactionalRepository is an autogenerated mock type for the TransactionalRepository type
type TransactionalRepository struct {
	mock.Mock
}

// InitTransaction provides a mock function with given fields:
func (_m *TransactionalRepository) InitTransaction() (*sqlx.Tx, error) {
	ret := _m.Called()

	var r0 *sqlx.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func() (*sqlx.Tx, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *sqlx.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransactionalRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionalRepository creates a new instance of TransactionalRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionalRepository(t mockConstructorTestingTNewTransactionalRepository) *TransactionalRepository {
	mock := &TransactionalRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
