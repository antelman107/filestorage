// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	domain "github.com/antelman107/filestorage/pkg/domain"

	mock "github.com/stretchr/testify/mock"
)

// GatewayService is an autogenerated mock type for the GatewayService type
type GatewayService struct {
	mock.Mock
}

// AddServer provides a mock function with given fields: ctx, server
func (_m *GatewayService) AddServer(ctx context.Context, server domain.Server) error {
	ret := _m.Called(ctx, server)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Server) error); ok {
		r0 = rf(ctx, server)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFile provides a mock function with given fields: ctx, fileID
func (_m *GatewayService) DeleteFile(ctx context.Context, fileID string) (domain.File, error) {
	ret := _m.Called(ctx, fileID)

	var r0 domain.File
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.File, error)); ok {
		return rf(ctx, fileID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.File); ok {
		r0 = rf(ctx, fileID)
	} else {
		r0 = ret.Get(0).(domain.File)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DownloadFile provides a mock function with given fields: ctx, fileID, writer
func (_m *GatewayService) DownloadFile(ctx context.Context, fileID string, writer io.Writer) error {
	ret := _m.Called(ctx, fileID, writer)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Writer) error); ok {
		r0 = rf(ctx, fileID, writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadFile provides a mock function with given fields: ctx, file, reader
func (_m *GatewayService) UploadFile(ctx context.Context, file domain.File, reader io.Reader) error {
	ret := _m.Called(ctx, file, reader)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.File, io.Reader) error); ok {
		r0 = rf(ctx, file, reader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewGatewayService interface {
	mock.TestingT
	Cleanup(func())
}

// NewGatewayService creates a new instance of GatewayService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGatewayService(t mockConstructorTestingTNewGatewayService) *GatewayService {
	mock := &GatewayService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
