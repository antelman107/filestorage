// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// StorageService is an autogenerated mock type for the StorageService type
type StorageService struct {
	mock.Mock
}

// DeleteChunk provides a mock function with given fields: ctx, name
func (_m *StorageService) DeleteChunk(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChunk provides a mock function with given fields: ctx, fileName, writer
func (_m *StorageService) GetChunk(ctx context.Context, fileName string, writer io.Writer) error {
	ret := _m.Called(ctx, fileName, writer)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Writer) error); ok {
		r0 = rf(ctx, fileName, writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreChunk provides a mock function with given fields: ctx, fileName, reader
func (_m *StorageService) StoreChunk(ctx context.Context, fileName string, reader io.Reader) error {
	ret := _m.Called(ctx, fileName, reader)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) error); ok {
		r0 = rf(ctx, fileName, reader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStorageService interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorageService creates a new instance of StorageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorageService(t mockConstructorTestingTNewStorageService) *StorageService {
	mock := &StorageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
